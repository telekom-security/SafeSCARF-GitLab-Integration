include:
  - template: Security/Container-Scanning.gitlab-ci.yml

.parse_container_name:
  before_script:
    - if [ -n "$CS_IMAGE" ]; then
    - IFS=':' read -ra parts <<< "$CS_IMAGE" # split docker image at ":"
    - VAR_1="${parts[0]}" # save first part as name and second part as version (e.g. nginx:12.3)
    - VAR_2="${parts[1]}"
    - echo "Naming Test(Service): $VAR_1"# Debug print
    - echo "Setting Version to: $VAR_2"
    - export SAFESCARF_SCAN_TITLE="$VAR_1"
    - export SAFESCARF_TEST_SERVICE="$VAR_1"
    - export SAFESCARF_VERSION="$VAR_2"
    - else
    - echo "CS_IMAGE was not set"
    - fi

container_scanning_upload_container:
  extends:
    - .safescarf_upload
    - container_scanning
  needs: ["safescarf_create_engagement", "container_scanning"]
  stage: !reference [.safescarf_upload, stage]
  image: !reference [.safescarf_upload, image]
  before_script: 
    - !reference [.safescarf_upload, before_script]
    - !reference [.parse_container_name, before_script]
  script: !reference [.safescarf_upload, script]
  artifacts: null
  dependencies: null
  variables:
    SAFESCARF_SCAN_TYPE: "GitLab Container Scan"
    SAFESCARF_SCAN_TITLE: "GL Container Scan"
    SAFESCARF_SCAN_FILE: "./gl-container-scanning-report.json"

container_scanning_upload_dependency:
  extends:
    - .safescarf_upload
    - container_scanning
  needs: ["safescarf_create_engagement", "container_scanning"]
  stage: !reference [.safescarf_upload, stage]
  image: !reference [.safescarf_upload, image]
  before_script:
    - !reference [.safescarf_upload, before_script]
    - !reference [.parse_container_name, before_script]
  script: !reference [.safescarf_upload, script]
  artifacts: null
  dependencies: null
  variables:
    SAFESCARF_SCAN_TYPE: "GitLab Dependency Scanning Report"
    SAFESCARF_SCAN_TITLE: "GL Container Dependency Scan"
    SAFESCARF_SCAN_FILE: "./gl-dependency-scanning-report.json"
